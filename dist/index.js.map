{"version":3,"file":"index.js","sources":["../src/defaults.ts","../src/errors.ts","../src/address.ts","../src/request.ts","../src/fetch.ts","../src/client.ts"],"sourcesContent":["import type { CustomBackendConfig, HeaderDict, NotarizationOptions } from './types';\n\nexport const DEFAULT_TIMEOUT_MS = 5000;\n\nexport const DEFAULT_NOTARIZATION_HEADERS: HeaderDict = {\n  Accept: '*/*',\n  'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36',\n  'Upgrade-Insecure-Requests': '1',\n  DNT: '1',\n};\n\nexport const DEFAULT_FETCH_OPTIONS: Pick<RequestInit, 'cache'|'keepalive'|'mode'|'referrer'|'redirect'> = {\n  cache: 'no-store',\n  mode: 'cors',\n  redirect: 'follow',\n  referrer: '',\n  keepalive: false,\n};\n\nexport const DEFAULT_NOTARIZATION_OPTIONS: NotarizationOptions = {\n  dataShouldMatch: true,\n  timeout: DEFAULT_TIMEOUT_MS,\n  maxTimeDeviation: undefined,\n};\n\nexport const DEFAULT_NOTARIZATION_BACKENDS: CustomBackendConfig[] = [\n  {\n    address: 'sgx.aleooracle.xyz',\n    port: 443,\n    https: true,\n    apiPrefix: '',\n    resolve: true,\n    init: DEFAULT_FETCH_OPTIONS,\n  },\n];\n\nexport const DEFAULT_VERIFICATION_BACKEND: CustomBackendConfig = {\n  address: 'verifier.aleooracle.xyz',\n  port: 443,\n  https: true,\n  apiPrefix: '',\n  resolve: true,\n  init: DEFAULT_FETCH_OPTIONS,\n};\n","import type { AttestationErrorResponse, DebugRequestResponseWithError } from './types/attestation';\n\nexport class AttestationError extends Error {\n  /**\n   * Additional information to help figure out the reason for the error\n   */\n  errorDetails: string | undefined;\n\n  /**\n   * Attestation target's response status code, which exists if the error\n   * has occurred during or after performing a request to the target.\n   */\n  responseStatusCode: number | undefined;\n\n  constructor(err: AttestationErrorResponse) {\n    super(err.errorMessage);\n\n    this.errorDetails = err.errorDetails;\n    this.responseStatusCode = err.responseStatusCode;\n  }\n}\n\nexport class DebugAttestationError extends Error {\n  /**\n   * Additional information to help figure out the reason for the error\n   */\n  errorDetails: string | undefined;\n\n  /**\n   * Attestation target's response status code, which exists if the error\n   * has occurred during or after performing a request to the target.\n   */\n  responseStatusCode: number | undefined;\n\n  /**\n   * Full response body received in the attestation target's response\n   */\n  responseBody: string;\n\n  /**\n   * Extracted data from `responseBody` using provided selector\n   */\n  extractedData: string;\n\n  constructor(err: DebugRequestResponseWithError) {\n    super(err.errorMessage);\n\n    this.errorDetails = err.errorDetails;\n    this.responseStatusCode = err.responseStatusCode;\n    this.responseBody = err.responseBody;\n    this.extractedData = err.extractedData;\n  }\n}\n\nexport class AttestationIntegrityError extends Error {}\n","import dns from 'node:dns';\nimport net from 'node:net';\n\nimport { CustomBackendConfig } from './types';\n\nexport async function resolve(hostname: string): Promise<string[]> {\n  const { resolve4 } = dns.promises;\n  return resolve4(hostname);\n}\n\nexport function trimPath(path: string): string {\n  let res = path.trim();\n\n  if (res === '') {\n    return res;\n  }\n\n  // replace repeating slashes in the beginning with one slash, remove repeating slashes in the end\n  res = res.replace(/^\\/+/, '/').replace(/\\/+$/, '');\n\n  // if the string didn't have a slash in the beginning in the first place,\n  // then replace won't work, so we add one manually\n  if (!res.startsWith('/')) {\n    res = `/${res}`;\n  }\n\n  return res;\n}\n\ntype HostAndUrl = { host: string; url: string; path: string };\n\n// Builds a URL based on the backend config and the desired resource path\nexport function getFullAddress(info: CustomBackendConfig, path: string = ''): HostAndUrl {\n  const scheme = info.https ? 'https://' : 'http://';\n\n  const trimmedPath = trimPath(path);\n  return {\n    host: `${info.address}:${info.port}`,\n    url: `${scheme}${info.address}:${info.port}${info.apiPrefix}${trimmedPath}`,\n    path: `${info.apiPrefix}${trimmedPath}`,\n  };\n}\n\ntype IpAndUrl = { ip: string; url: string; path: string };\n\n// Builds a URL based on the backend config and the desired resource path. If the address is not an IP, and\n// the backend config enables resolving, then this function tries to resolve the address to an IP, then builds\n// the full URLs using all of the resolved IPs.\nexport async function getOrResolveFullAddress(info: CustomBackendConfig, path: string): Promise<IpAndUrl[]> {\n  let ips = [info.address];\n\n  if (net.isIP(info.address) === 0 && info.resolve) {\n    ips = await resolve(info.address);\n  }\n\n  return ips.map((ip) => {\n    const trimmedPath = trimPath(path);\n    const scheme = info.https ? 'https://' : 'http://';\n\n    return {\n      ip,\n      url: `${scheme}${ip}:${info.port}${info.apiPrefix}${trimmedPath}`,\n      path: `${info.apiPrefix}${trimmedPath}`,\n    };\n  });\n}\n\nexport function trimUrl(url: string) {\n  let trimmedUrl = url.trim();\n\n  // delete trailing slashes\n  while (trimmedUrl.endsWith('/')) {\n    trimmedUrl = trimmedUrl.slice(0, -1);\n  }\n\n  return trimmedUrl;\n}\n","/* eslint-disable import/prefer-default-export */\nimport { AttestationError, DebugAttestationError } from './errors';\n\nimport type {\n  AttestationErrorResponse,\n  AttestationResponse,\n  DebugRequestResponse,\n  DebugRequestResponseWithError,\n  EnclaveInfo,\n} from './types';\n\nimport type { Response } from './fetch';\n\nexport async function handleInfoResponse(resp: Response): Promise<EnclaveInfo> {\n  const oracleBackendURL = new URL(resp.url);\n  let jsonBody;\n  try {\n    jsonBody = await resp.json();\n  } catch (e) {\n    // the response doesn't have a JSON body. This is an error response without an error message\n    throw new Error('failed to parse response', { cause: { error: e, host: oracleBackendURL.host, status: resp.statusText } });\n  }\n\n  if (resp.status !== 200) {\n    // general error with a JSON body\n    throw new AttestationError(jsonBody as AttestationErrorResponse);\n  }\n\n  const result: EnclaveInfo = {\n    enclaveUrl: oracleBackendURL.origin,\n    ...jsonBody,\n  };\n\n  return result;\n}\n\nexport async function handleAttestationResponse(\n  options: { timeout?: number; debug: boolean },\n  resp: Response,\n): Promise<DebugRequestResponse|AttestationResponse> {\n  const oracleBackendURL = new URL(resp.url);\n  let jsonBody;\n  try {\n    jsonBody = await resp.json();\n  } catch (e) {\n    // the response doesn't have a JSON body. This is an error response without an error message\n    throw new Error('attestation failed', { cause: { error: e, host: oracleBackendURL.host, status: resp.statusText } });\n  }\n\n  if (resp.status !== 200) {\n    // this is an error with a JSON body, can be attestation error or debug request error\n    if (options.debug && jsonBody.responseBody !== undefined) {\n      // user did a debug request, and we got a debug error response, which is indicated by having a responseBody and errorMessage\n      throw new DebugAttestationError(jsonBody as DebugRequestResponseWithError);\n    } else {\n      // general attestation error with a JSON body\n      throw new AttestationError(jsonBody as AttestationErrorResponse);\n    }\n  }\n\n  // the user requested debugging, the request didn't fail, therefore it's a successful debugging request\n  if (options.debug) {\n    return jsonBody as DebugRequestResponse;\n  }\n\n  const attestation: AttestationResponse = {\n    enclaveUrl: oracleBackendURL.origin,\n    ...jsonBody,\n  };\n\n  return attestation;\n}\n","import https from 'node:https';\nimport http from 'node:http';\n\nimport type { IncomingMessage, OutgoingHttpHeaders } from 'http';\nimport type { CustomBackendConfig } from './types';\n\nimport { getFullAddress } from './address';\n\ninterface FetchResponse {\n  text(): Promise<string>;\n  json(): Promise<any>;\n\n  readonly headers: Record<string, string>;\n  readonly ok: boolean;\n  readonly redirected: boolean;\n  readonly status: number;\n  readonly statusText: string;\n  readonly type: ResponseType;\n  readonly url: string;\n}\n\nexport class Response implements FetchResponse {\n  readonly headers: Record<string, string>;\n\n  readonly ok: boolean;\n\n  readonly redirected: boolean;\n\n  readonly status: number;\n\n  readonly statusText: string;\n\n  readonly type: ResponseType;\n\n  readonly url: string;\n\n  readonly #data: string;\n\n  constructor(status: number, url: string, headers: Record<string, string>, data: string) {\n    this.headers = headers;\n    this.ok = status === 200;\n    this.redirected = false;\n    this.status = status;\n    this.statusText = `${status}`;\n    this.type = 'default';\n    this.url = url;\n    this.#data = data;\n  }\n\n  async json(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      try {\n        const data: any = JSON.parse(this.#data);\n        resolve(data);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  async text(): Promise<string> {\n    return Promise.resolve(this.#data);\n  }\n}\n\nexport default async function fetch(backend: CustomBackendConfig, ip: string, path: string, init: RequestInit): Promise<Response> {\n  let data = '';\n\n  const reqObj = {\n    host: ip,\n    path,\n    servername: backend.address,\n    port: backend.port,\n    method: init.method,\n    lookup: backend.resolve ? () => {} : undefined,\n    headers: {\n      ...init.headers,\n      host: backend.address,\n    } as OutgoingHttpHeaders,\n  };\n\n  return new Promise((resolve, reject) => {\n    const headersDict: Record<string, string> = {};\n\n    const handleResponse = (res: IncomingMessage) => {\n      res.on('data', (d) => {\n        data += d;\n      });\n\n      res.on('end', () => {\n        // build headers dict\n        Object.entries(res.headers).forEach(([header, headerValue]) => {\n          if (headerValue !== undefined) {\n            if (Array.isArray(headerValue)) {\n              headersDict[header] = headerValue.join(', ');\n            } else {\n              headersDict[header] = headerValue;\n            }\n          }\n        });\n\n        resolve(new Response(res.statusCode || 0, getFullAddress(backend, path).url, headersDict, data));\n      });\n    };\n\n    let req;\n    if (backend.https) {\n      req = https.request(reqObj, handleResponse);\n    } else {\n      req = http.request(reqObj, handleResponse);\n    }\n\n    req.on('error', (e) => reject(e));\n\n    if (init.body) {\n      req.write(init.body);\n    }\n\n    req.end();\n  });\n}\n","import type {\n  ClientConfig,\n  InfoOptions,\n  EnclaveInfo,\n  NotarizationOptions,\n  AttestationResponse,\n  DebugRequestResponse,\n  AttestationRequest,\n  CustomBackendConfig,\n} from './types';\n\nimport {\n  DEFAULT_FETCH_OPTIONS, DEFAULT_NOTARIZATION_BACKENDS, DEFAULT_NOTARIZATION_OPTIONS, DEFAULT_TIMEOUT_MS,\n  DEFAULT_VERIFICATION_BACKEND, DEFAULT_NOTARIZATION_HEADERS,\n} from './defaults';\nimport { AttestationIntegrityError } from './errors';\nimport {\n  getFullAddress, getOrResolveFullAddress, trimPath, trimUrl,\n} from './address';\nimport { handleAttestationResponse, handleInfoResponse } from './request';\nimport fetch, { type Response } from './fetch';\n\n/**\n * @example\n * const req: AttestationRequest = {\n *   url: 'google.com',\n *   requestMethod: 'GET',\n *   responseFormat: 'html',\n *   htmlResultType: 'value',\n *   selector: '/html/head/title',\n * }\n *\n * const client = new OracleClient();\n *\n * const resp = await client.notarize(req);\n *\n * console.log(resp.attestationData); // will print \"Google\"\n */\nexport default class OracleClient {\n  #oracleBackends: Required<CustomBackendConfig>[];\n\n  #verifier: Required<CustomBackendConfig>;\n\n  private log: (...args: any[]) => void;\n\n  constructor(config?: ClientConfig) {\n    if (config?.quiet ?? false) {\n      this.log = () => {};\n    } else {\n      this.log = config?.logger || console.log;\n    }\n\n    // we may modify the config, so we create a copy\n    const conf = { ...config };\n\n    // Use the configured notarizer backend, add default fetch options if they are missing.\n    // Use default notarization backends if the configuration is missing.\n    // Note that the configuration allows configuring only one backend, while the SDK supports multiple\n    // notarization backends.\n    if (conf?.notarizer) {\n      conf.notarizer.init = {\n        ...DEFAULT_FETCH_OPTIONS,\n        ...conf.notarizer.init,\n      };\n      conf.notarizer.apiPrefix = conf.notarizer.apiPrefix || '';\n      this.#oracleBackends = [conf.notarizer as Required<CustomBackendConfig>];\n    } else {\n      this.#oracleBackends = DEFAULT_NOTARIZATION_BACKENDS as Required<CustomBackendConfig>[];\n    }\n\n    // sanitize oracle backend configs\n    this.#oracleBackends = this.#oracleBackends.map((backend: Required<CustomBackendConfig>) => {\n      const sanitizedConf = { ...backend };\n      sanitizedConf.address = trimUrl(backend.address);\n      sanitizedConf.apiPrefix = trimPath(backend.apiPrefix || '');\n      return sanitizedConf;\n    });\n    this.log('OracleClient: using notarizers:', this.#oracleBackends.map((backend) => getFullAddress(backend).host).join(', '));\n\n    // Use the configured verification backend, add default fetch options if they are missing.\n    // Use default verification backend if the configuration is missing.\n    if (conf?.verifier) {\n      conf.verifier.init = {\n        ...DEFAULT_FETCH_OPTIONS,\n        ...conf.verifier.init,\n      };\n      conf.verifier.apiPrefix = conf.verifier.apiPrefix || '';\n      this.#verifier = conf.verifier as Required<CustomBackendConfig>;\n    } else {\n      this.#verifier = DEFAULT_VERIFICATION_BACKEND as Required<CustomBackendConfig>;\n    }\n\n    // sanitize verification backend config\n    this.#verifier.address = trimUrl(this.#verifier.address);\n    this.#verifier.apiPrefix = trimPath(this.#verifier.apiPrefix || '');\n\n    this.log('OracleClient: using verifier:', getFullAddress(this.#verifier).host);\n  }\n\n  /**\n   * Requests attestation of data extracted from the provided URL using provided selector. Attestation is created by one or more\n   * Trusted Execution Environments (TEE). If more than one is used (default), all attestation requests should succeed.\n   *\n   * Use options to configure attestation.\n   *\n   * If `options.dataShouldMatch` is set to `true`, returns extracted data, attested by one of the attesting TEEs.\n   * Otherwise it returns an array of extracted data, attested by all of the available TEEs.\n   *\n   * @throws {AttestationError | AttestationIntegrityError | Error}\n   */\n  async notarize(req: AttestationRequest, options: NotarizationOptions = DEFAULT_NOTARIZATION_OPTIONS): Promise<AttestationResponse[]> {\n    const attestations = await this.createAttestation(req, { timeout: options.timeout, debug: false }) as AttestationResponse[];\n    this.log(`OracleClient: attested ${new URL(`https://${req.url}`).host} using ${this.#oracleBackends.length} attesters`);\n\n    const numbAttestations = attestations.length;\n\n    if (numbAttestations === 0 || numbAttestations !== this.#oracleBackends.length) {\n      throw new AttestationIntegrityError(\n        'unexpected number of attestations',\n        { cause: `expected ${this.#oracleBackends.length}, got ${numbAttestations}` },\n      );\n    }\n\n    // do some basic client side validation\n    const firstAttestation = attestations[0];\n    const attestationTimestamps = [attestations[0].timestamp];\n    for (let i = 1; i < numbAttestations; i++) {\n      // data matching is disabled, this check is done first for a possibility of early exit\n      if (options.dataShouldMatch && attestations[i].attestationData !== firstAttestation.attestationData) {\n        throw new AttestationIntegrityError('attestation data mismatch', { cause: attestations.map((at) => at.attestationData) });\n      }\n\n      // save the timestamps to check for deviation of all attestations\n      attestationTimestamps.push(attestations[i].timestamp);\n    }\n\n    if (options.maxTimeDeviation !== undefined) {\n      // warn the user that it's not recommended to have a deviation less than 10ms or more than 10s\n      if (options.maxTimeDeviation < 10 || options.maxTimeDeviation > 10 * 1000) {\n        this.log(`OracleClient: WARNING max time deviation for attestation of ${options.maxTimeDeviation}ms is not recommended`);\n      }\n      // test that all attestations were done within the allowed deviation\n      attestationTimestamps.sort();\n      // the difference between the soonest and latest timestamps shouldn't be more than the configured deviation\n      if (attestationTimestamps[numbAttestations - 1] - attestationTimestamps[0] > options.maxTimeDeviation) {\n        throw new AttestationIntegrityError(\n          'attestation timestamps deviate too much',\n          { cause: { maxTimeDeviation: options.maxTimeDeviation, attestationTimestamps } },\n        );\n      }\n    }\n\n    const isValid = await this.verifyReports(attestations, options.timeout || DEFAULT_TIMEOUT_MS);\n    if (!isValid) {\n      throw new AttestationIntegrityError('failed to verify reports');\n    }\n\n    return attestations;\n  }\n\n  /**\n   * Use this function to test your requests without performing attestation and verification\n   *\n   * @throws {DebugAttestationError | Error}\n   */\n  async testSelector(req: AttestationRequest, timeout: number): Promise<DebugRequestResponse[]> {\n    return this.createAttestation(req, { timeout, debug: true }) as Promise<DebugRequestResponse[]>;\n  }\n\n  /**\n   * Requests information about enclaves that Notarization Backend is running in\n   *\n   * @throws {AttestationError | Error}\n   */\n  async enclavesInfo(options?: InfoOptions): Promise<EnclaveInfo[]> {\n    const API_ENDPOINT = '/info';\n\n    let abortSignal: AbortSignal|undefined;\n\n    if (options?.timeout && options?.timeout > 0) {\n      abortSignal = AbortSignal.timeout(options?.timeout);\n    }\n\n    // resolve backends to one or more IPs, then we send the request to all of the resolved IPs\n    // and get the first response - this helps with availability and geographic load balancing.\n    const resolvedBackends = await Promise.all(\n      this.#oracleBackends.map(async (backend) => {\n        const hostsAndUrls = await getOrResolveFullAddress(backend, API_ENDPOINT);\n        return {\n          backend,\n          hostsAndUrls,\n        };\n      }),\n    );\n\n    let responses: Response[];\n\n    try {\n      // each backend may be resolved to more than one IP, send a request to all of them,\n      // for every backend wait for only one response to arrive.\n      responses = await Promise.all(\n        resolvedBackends.map(async (resolvedBackend) => {\n          const fetchOptions: RequestInit = {\n            ...resolvedBackend.backend.init,\n            signal: abortSignal,\n            method: 'GET',\n            headers: {\n              ...resolvedBackend.backend.init.headers,\n              'Content-Type': 'application/json',\n            },\n          };\n\n          return Promise.any(\n            resolvedBackend.hostsAndUrls.map(({ ip, path }) => fetch(resolvedBackend.backend, ip, path, fetchOptions)),\n          );\n        }),\n      );\n    } catch (e) {\n      this.log('OracleClient: one or more info requests have failed, reason -', e);\n      throw e;\n    }\n\n    const enclavesInfo = await Promise.all(\n      responses.map((resp) => handleInfoResponse(resp)),\n    );\n\n    return enclavesInfo;\n  }\n\n  /**\n   * @throws {AttestationIntegrityError | Error}\n   */\n  private async verifyReports(attestations: AttestationResponse[], timeout: number): Promise<boolean> {\n    const API_ENDPOINT = '/verify';\n\n    const abortSignal = AbortSignal.timeout(timeout);\n\n    // resolve backends to one or more IPs, then we send the request to all of the resolved IPs\n    // and get the first response - this helps with availability and geographic load balancing.\n    const resolvedUrls = await getOrResolveFullAddress(this.#verifier, API_ENDPOINT);\n\n    const fetchOptions: RequestInit = {\n      ...this.#verifier.init,\n      signal: abortSignal,\n      method: 'POST',\n      headers: {\n        ...this.#verifier.init.headers,\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ reports: attestations }),\n    };\n\n    let response: Response;\n    try {\n      response = await Promise.any(resolvedUrls.map(({ ip, path }) => fetch(this.#verifier, ip, path, fetchOptions)));\n    } catch (e) {\n      this.log('OracleClient: verification request have failed, reason -', e);\n      throw e;\n    }\n\n    if (response.status !== 200) {\n      throw new AttestationIntegrityError(`verification failed: ${response.statusText}`);\n    }\n\n    let jsonBody;\n    try {\n      jsonBody = await response.json() as { success: boolean; errorMessage?: string };\n    } catch (e) {\n      this.log(`OracleClient: failed to parse verification response from ${this.#verifier}, reason - ${e}`);\n      throw new Error('verification failed', { cause: { host: this.#verifier, status: response.statusText } });\n    }\n\n    if (!jsonBody.success) {\n      throw new AttestationIntegrityError(`verification failed: ${jsonBody.errorMessage}`);\n    }\n\n    return true;\n  }\n\n  /**\n   * @throws {AttestationError | DebugAttestationError | Error}\n   */\n  private async createAttestation(\n    req: AttestationRequest,\n    options: { timeout?: number; debug: boolean } = { timeout: DEFAULT_TIMEOUT_MS, debug: false },\n  ): Promise<AttestationResponse[] | DebugRequestResponse[]> {\n    const API_ENDPOINT = '/notarize';\n\n    // construct oracle HTTP request body\n    const attestReq: AttestationRequest & { debugRequest: boolean } = {\n      ...req,\n      requestHeaders: {\n        ...DEFAULT_NOTARIZATION_HEADERS,\n        ...(req.requestHeaders ?? {}),\n      },\n      debugRequest: options.debug,\n    };\n\n    let abortSignal: AbortSignal|undefined;\n\n    if (options?.timeout && options?.timeout > 0) {\n      abortSignal = AbortSignal.timeout(options?.timeout);\n    }\n\n    // resolve backends to one or more IPs, then we send the request to all of the resolved IPs\n    // and get the first response - this helps with availability and geographic load balancing.\n    const resolvedBackends = await Promise.all(\n      this.#oracleBackends.map(async (backend) => {\n        const resolvedUrls = await getOrResolveFullAddress(backend, API_ENDPOINT);\n        return {\n          backend,\n          ipAndUrl: resolvedUrls,\n        };\n      }),\n    );\n\n    let responses: Response[];\n    try {\n      // each backend may be resolved to more than one IP, send a request to all of them,\n      // for every backend wait for only one response to arrive.\n      responses = await Promise.all(\n        resolvedBackends.map(async (resolvedBackend) => {\n          const fetchOptions: RequestInit = {\n            ...resolvedBackend.backend.init,\n            method: 'POST',\n            signal: abortSignal,\n            body: JSON.stringify(attestReq),\n            headers: {\n              ...resolvedBackend.backend.init.headers,\n              'Content-Type': 'application/json',\n            },\n          };\n\n          return Promise.any(\n            resolvedBackend.ipAndUrl.map(({ ip, path }) => fetch(resolvedBackend.backend, ip, path, fetchOptions)),\n          );\n        }),\n      );\n    } catch (e) {\n      this.log('OracleClient: one or more attestation requests have failed, reason -', e);\n      throw e;\n    }\n\n    const attestations = await Promise.all(\n      responses.map(async (resp) => handleAttestationResponse(options, resp)),\n    );\n\n    return attestations as (AttestationResponse[] | DebugRequestResponse[]);\n  }\n}\n"],"names":[],"mappings":"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"}